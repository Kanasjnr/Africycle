# Docker Environment Configuration
# Copy this file to .env for Docker deployment
# 
# ⚠️  SECURITY WARNING ⚠️
# This file contains placeholder values for development only.
# NEVER use these values in production!
# Replace ALL placeholder values with secure, unique credentials.

# ====================================
# APPLICATION CONFIGURATION
# ====================================

# Environment mode
NODE_ENV=development

# ====================================
# FRONTEND CONFIGURATION
# ====================================

# Celo Network Configuration
NEXT_PUBLIC_CELO_RPC_URL=https://alfajores-forno.celo-testnet.org

# Smart Contract Configuration
NEXT_PUBLIC_AFRICYCLE_CONTRACT_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3

# WalletConnect Configuration
# Get your project ID from: https://cloud.walletconnect.com/
NEXT_PUBLIC_WC_PROJECT_ID=REPLACE_WITH_YOUR_WALLETCONNECT_PROJECT_ID

# Cloudinary Configuration
# Get your credentials from: https://cloudinary.com/console
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=REPLACE_WITH_YOUR_CLOUDINARY_CLOUD_NAME
NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=REPLACE_WITH_YOUR_CLOUDINARY_UPLOAD_PRESET
CLOUDINARY_URL=cloudinary://REPLACE_WITH_API_KEY:REPLACE_WITH_API_SECRET@REPLACE_WITH_CLOUD_NAME

# ====================================
# DATABASE CONFIGURATION
# ====================================

# PostgreSQL Database
# ⚠️  Use strong, unique passwords in production!
POSTGRES_DB=africycle
POSTGRES_USER=africycle
POSTGRES_PASSWORD=REPLACE_WITH_STRONG_DATABASE_PASSWORD
DATABASE_URL=postgresql://africycle:REPLACE_WITH_STRONG_DATABASE_PASSWORD@postgres:5432/africycle

# ====================================
# BLOCKCHAIN CONFIGURATION
# ====================================

# Hardhat Configuration
# ⚠️  CRITICAL: Replace with your actual private key for deployment
# ⚠️  Never commit real private keys to version control!
# ⚠️  Use environment variables or secure key management in production
PRIVATE_KEY=REPLACE_WITH_YOUR_DEPLOYMENT_PRIVATE_KEY

# CeloScan API Key (for contract verification)
# Get your API key from: https://celoscan.io/apis
CELOSCAN_API_KEY=REPLACE_WITH_YOUR_CELOSCAN_API_KEY

# Development flags
REPORT_GAS=true
VERIFY_CONTRACTS=false
COVERAGE_REPORT=true

# ====================================
# SECURITY CONFIGURATION
# ====================================

# JWT Configuration
# ⚠️  Use a strong, random secret in production!
# Generate with: openssl rand -base64 32
JWT_SECRET=REPLACE_WITH_STRONG_JWT_SECRET
JWT_EXPIRES_IN=7d

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# ====================================
# MONITORING & LOGGING
# ====================================

# Logging Level
LOG_LEVEL=info

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001

# ⚠️  Change default Grafana password in production!
# Generate with: openssl rand -base64 12
GRAFANA_ADMIN_PASSWORD=REPLACE_WITH_STRONG_GRAFANA_PASSWORD

# ====================================
# SSL CONFIGURATION (Production)
# ====================================

# SSL Certificate paths
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem

# Domain configuration
DOMAIN=localhost

# ====================================
# DEVELOPMENT CONFIGURATION
# ====================================

# Hot reload for development
WATCHPACK_POLLING=true
CHOKIDAR_USEPOLLING=true

# Debug mode
DEBUG=false

# ====================================
# PRODUCTION OVERRIDES
# ====================================

# For production deployment, override these values:
# NODE_ENV=production
# NEXT_PUBLIC_CELO_RPC_URL=https://forno.celo.org
# DOMAIN=your-production-domain.com
# 
# ⚠️  PRODUCTION SECURITY CHECKLIST:
# [ ] Set strong, unique POSTGRES_PASSWORD
# [ ] Set strong, unique JWT_SECRET
# [ ] Set strong, unique GRAFANA_ADMIN_PASSWORD
# [ ] Configure real Cloudinary credentials
# [ ] Set actual WalletConnect project ID
# [ ] Configure SSL certificates
# [ ] Use secure private key management
# [ ] Enable contract verification
# [ ] Set up proper monitoring and alerting
# [ ] Configure backup and disaster recovery
# [ ] Set up proper logging and audit trails
# [ ] Configure rate limiting for production load
# [ ] Set up proper CORS configuration
# [ ] Enable security headers
# [ ] Configure proper database connection pooling
# [ ] Set up proper error handling and logging
# [ ] Configure proper session management
# [ ] Set up proper backup strategies
# [ ] Configure proper monitoring and alerting
# [ ] Set up proper logging and audit trails

# ====================================
# SECURITY BEST PRACTICES
# ====================================

# 1. Use environment-specific configuration files
# 2. Never commit secrets to version control
# 3. Use secrets management services in production
# 4. Rotate credentials regularly
# 5. Use least privilege principle
# 6. Enable audit logging
# 7. Monitor for suspicious activity
# 8. Keep dependencies updated
# 9. Use HTTPS in production
# 10. Implement proper input validation
# 11. Use prepared statements for database queries
# 12. Implement proper error handling
# 13. Use secure session management
# 14. Implement proper access controls
# 15. Regular security audits and penetration testing 