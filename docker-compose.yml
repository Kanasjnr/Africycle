version: '3.8'

services:
  # Frontend React App
  frontend:
    build:
      context: ./packages/react-app
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./packages/react-app:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - NEXT_PUBLIC_CELO_RPC_URL=http://hardhat:8545
      - NEXT_PUBLIC_AFRICYCLE_CONTRACT_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3
      - NEXT_PUBLIC_WC_PROJECT_ID=your_walletconnect_project_id
      - DATABASE_URL=postgresql://africycle:password@postgres:5432/africycle
      - NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=your_cloudinary_name
      - NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=your_upload_preset
      - CLOUDINARY_URL=cloudinary://key:secret@your_cloudinary_name
    depends_on:
      - hardhat
      - postgres
    networks:
      - africycle-network
    command: npm run dev

  # Hardhat Blockchain Development Node
  hardhat:
    build:
      context: ./packages/hardhat
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    volumes:
      - ./packages/hardhat:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
      - CELOSCAN_API_KEY=your_celoscan_api_key
      - REPORT_GAS=true
      - COVERAGE_REPORT=true
    networks:
      - africycle-network
    command: npx hardhat node --hostname 0.0.0.0

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=africycle
      - POSTGRES_USER=africycle
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - africycle-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - africycle-network

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
    networks:
      - africycle-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  africycle-network:
    driver: bridge 